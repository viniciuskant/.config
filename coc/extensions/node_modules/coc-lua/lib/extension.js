"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const installer_1 = require("./utils/installer");
const tools_1 = require("./utils/tools");
const commands_1 = require("./commands");
const config_1 = require("./utils/config");
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, config_1.setStoragePath)(context.storagePath);
        const config = (0, config_1.getConfig)();
        if (config.enable === false) {
            return;
        }
        if (config.checkForUpdates !== "disabled") {
            setTimeout(() => (0, installer_1.checkForUpdate)(config.checkForUpdates), 0);
        }
        const client = yield createClient();
        context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), coc_nvim_1.commands.registerCommand("lua.version", () => (0, commands_1.version)()), coc_nvim_1.commands.registerCommand("lua.update", () => tslib_1.__awaiter(this, void 0, void 0, function* () { return (0, commands_1.update)(client); })));
    });
}
exports.activate = activate;
function createClient() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [command, args] = yield (0, installer_1.luaLsCommandAndArgs)();
        if (!(yield (0, tools_1.commandExists)(command))) {
            yield (0, installer_1.installLuaLs)();
        }
        const serverOptions = { command, args };
        const clientOptions = {
            documentSelector: ["lua"],
            progressOnInitialization: true,
            initializationOptions: {
                changeConfiguration: true,
            }
        };
        return new coc_nvim_1.LanguageClient("lua", "lua", serverOptions, clientOptions);
    });
}
//# sourceMappingURL=extension.js.map